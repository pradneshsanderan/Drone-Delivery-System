1)read the lunch orders for the date from the database
    +process the command line arguments to get the date
    + get the order numbers for that date from the first database
    + use order number to get the orders for the details from the second table
    + store the order details for the date in a map
2) read the menus from the website
    + compare with the stored order details /and put locations in the map with pick up locations
3)calculate the flight path for the day
    -use a searching algorithm to search the optimal path for the day
    - if we use travelling salesman then the coordinates would be the nodes and the cost would be the weight
    - greedy could work but work have O^n moves cause it has to search each time
        - what could be done is to use 2 algorithms. run the greedy one first and check if all the orders can be delivered in the day
          if it cant be delivered then run the second one that finds the optimal path with the most money made
4)create a database to record the deliveries for the day
5) create a database to record the flightpatj. move by move
6) produce a geojson map which provides a visual representation of the flight path



//getting stuck on: 4/4,2/3,5/5,6/6,7/7,8/8,9/9,10/10,11/11,12/12
// main issue is detecting when it is stuck

// check for the incorrect port error on the http client slides


flow of the program:
get orders
get order details
get coordinates
parse the geojson

start in appleton
//first run until finished the orders then we check the number of moves later
loop:run in loop until orders finished
    check closest pick up
    loop: run until all items picked up
        move to pick up
        hover down, hover up
        move to next pick up if applicable
        hover down, hover up
    move to delivery coordinates
    hover down , hover up


//new move program
call move once only in app not multiple times
the most optimum path would not do reverses
so we list all the movements(coordinates) with angle taken
if we go back to a certain angle then we fucked up somewhere
so we backtrack until that point,
then we take the next angle



//check that the drone must return to appleton before it runs out of batterry
